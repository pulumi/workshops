name: az-getting-started-aks-yaml
runtime: yaml
description: A minimal Pulumi YAML program

variables:
  kubeconfig:
    fn::invoke:
      function: azure-native:containerservice/v20240102preview:listManagedClusterUserCredentials
      arguments:
        resourceGroupName: ${myAKSClusterResourceGroup.name}
        resourceName: ${myAKSCluster.name}

resources:
  myAKSClusterResourceGroup:
    type: azure-native:resources:ResourceGroup
    properties:
      resourceGroupName: my-aks-cluster-rg
  myAKSCluster:
    type: azure-native:containerservice/v20240102preview:ManagedCluster
    properties:
      kubernetesVersion: 1.29.0
      resourceGroupName: ${myAKSClusterResourceGroup.name}
      resourceName: my-aks-cluster
      nodeResourceGroup: ${myAKSClusterResourceGroup.name}-nodes
      dnsPrefix: ${myAKSClusterResourceGroup.name}
      networkProfile:
        networkDataplane: cilium
        networkPlugin: azure
        networkPluginMode: overlay
        networkPolicy: cilium
        podCidr: 192.168.0.0/16
      servicePrincipalProfile:
      identity:
        type: SystemAssigned
      agentPoolProfiles:
      - name: agentpool
        count: 3
        vmSize: Standard_B2ms
        osType: Linux
        osDiskSizeGB: 30
        type: VirtualMachineScaleSets
        mode: System
  myk8sProvider:
    type: pulumi:providers:kubernetes
    properties:
      kubeconfig:
        fn::fromBase64: ${kubeconfig.kubeconfigs[0].value}
      enableServerSideApply: true

  rabbitmqDeployment:
    type: kubernetes:apps/v1:Deployment
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: rabbitmq
      spec:
        replicas: 1
        selector:
          matchLabels: { app: rabbitmq }
        template:
          metadata: { labels: { app: rabbitmq } }
          spec:
            nodeSelector: { "kubernetes.io/os": linux }
            volumes:
            - name: rabbitmq-enabled-plugins
              configMap:
                name: rabbitmq-enabled-plugins
                items:
                - key: rabbitmq_enabled_plugins
                  path: enabled_plugins
            containers:
            - name: rabbitmq
              image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
              ports:
              - name: rabbitmq-amqp
                containerPort: 5672
              - name: rabbitmq-http
                containerPort: 15672
              env:
              - name: RABBITMQ_DEFAULT_USER
                value: "username"
              - name: RABBITMQ_DEFAULT_PASS
                value: "password"
              resources:
                requests:
                  cpu: 10m
                  memory: 128Mi
                limits:
                  cpu: 250m
                  memory: 256Mi
              volumeMounts:
              - name: rabbitmq-enabled-plugins
                mountPath: /etc/rabbitmq/enabled_plugins
                subPath: enabled_plugins
  rabbitmqConfigMap:
    type: kubernetes:core/v1:ConfigMap
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: rabbitmq-enabled-plugins
      data:
        rabbitmq_enabled_plugins: |
          [rabbitmq_management,rabbitmq_prometheus,rabbitmq_amqp1_0].
  rabbitmqService:
    type: kubernetes:core/v1:Service
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: rabbitmq
      spec:
        selector: { app: rabbitmq }
        type: ClusterIP
        ports:
        - name: rabbitmq-amqp
          port: 5672
          targetPort: 5672
        - name: rabbitmq-http
          port: 15672
          targetPort: 15672
  orderServiceDeployment:
    type: kubernetes:apps/v1:Deployment
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: order-service
      spec:
        replicas: 1
        selector:
          matchLabels: { app: order-service }
        template:
          metadata: { labels: { app: order-service } }
          spec:
            nodeSelector: { "kubernetes.io/os": linux }
            initContainers:
            - name: wait-for-rabbitmq
              image: busybox
              command: ['sh', '-c', 'until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;']
              resources:
                requests:
                  cpu: 1m
                  memory: 50Mi
                limits:
                  cpu: 75m
                  memory: 128Mi
            containers:
            - name: order-service
              image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
              ports: [ { containerPort: 3000 } ]
              resources:
                requests:
                  cpu: 1m
                  memory: 50Mi
                limits:
                  cpu: 75m
                  memory: 128Mi
              env:
              - name: ORDER_QUEUE_HOSTNAME
                value: "rabbitmq"
              - name: ORDER_QUEUE_PORT
                value: "5672"
              - name: ORDER_QUEUE_USERNAME
                value: "username"
              - name: ORDER_QUEUE_PASSWORD
                value: "password"
              - name: FASTIFY_ADDRESS
                value: "0.0.0.0"
  orderServiceService:
    type: kubernetes:core/v1:Service
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: order-service
      spec:
        type: ClusterIP
        ports:
        - name: http
          port: 3000
          targetPort: 3000
        selector:
          app: order-service
  productServiceDeployment:
    type: kubernetes:apps/v1:Deployment
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: product-service
      spec:
        replicas: 1
        selector:
          matchLabels: { app: product-service }
        template:
          metadata: { labels: { app: product-service } }
          spec:
            nodeSelector: { "kubernetes.io/os": linux }
            containers:
            - name: product-service
              image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
              ports: [ { containerPort: 3002 } ]
              resources:
                requests:
                  cpu: 1m
                  memory: 1Mi
                limits:
                  cpu: 1m
                  memory: 7Mi
  productServiceService:
    type: kubernetes:core/v1:Service
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: product-service
      spec:
        type: ClusterIP
        ports:
        - name: http
          port: 3002
          targetPort: 3002
        selector:
          app: product-service
  frontendDeployment:
    type: kubernetes:apps/v1:Deployment
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: store-front
      spec:
        replicas: 1
        selector:
          matchLabels: { app: store-front }
        template:
          metadata: { labels: { app: store-front } }
          spec:
            nodeSelector: { "kubernetes.io/os": linux }
            containers:
            - name: store-front
              image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
              ports: [ {containerPort: 8080, name: store-front } ]
              resources:
                requests:
                  cpu: 1m
                  memory: 200Mi
                limits:
                  cpu: 1000m
                  memory: 512Mi
              env:
              - name: VUE_APP_ORDER_SERVICE_URL
                value: "http://order-service:3000/"
              - name: VUE_APP_PRODUCT_SERVICE_URL
                value: "http://product-service:3002/"
  frontendService:
    type: kubernetes:core/v1:Service
    options:
      provider: ${myk8sProvider}
    properties:
      metadata:
        name: store-front
      spec:
        type: LoadBalancer
        selector: { app: store-front }
        ports:
        - port: 80
          targetPort: 8080

outputs:
  serviceIp: ${frontendService.status.loadBalancer.ingress[0].ip}
