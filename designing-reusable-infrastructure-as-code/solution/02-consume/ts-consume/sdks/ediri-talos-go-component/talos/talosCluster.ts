// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class TalosCluster extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'talos-go-component:talos:TalosCluster';

    /**
     * Returns true if the given object is an instance of TalosCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TalosCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TalosCluster.__pulumiType;
    }

    public readonly clusterName!: pulumi.Output<string>;
    public readonly countControlPlane!: pulumi.Output<number>;
    public readonly countWorker!: pulumi.Output<number>;
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a TalosCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TalosClusterArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.countControlPlane === undefined) && !opts.urn) {
                throw new Error("Missing required property 'countControlPlane'");
            }
            if ((!args || args.countWorker === undefined) && !opts.urn) {
                throw new Error("Missing required property 'countWorker'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["countControlPlane"] = args ? args.countControlPlane : undefined;
            resourceInputs["countWorker"] = args ? args.countWorker : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["kubeconfig"] = undefined /*out*/;
        } else {
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["countControlPlane"] = undefined /*out*/;
            resourceInputs["countWorker"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TalosCluster.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a TalosCluster resource.
 */
export interface TalosClusterArgs {
    clusterName: pulumi.Input<string>;
    countControlPlane: number;
    countWorker: number;
    region: pulumi.Input<string>;
    size: pulumi.Input<string>;
    version: pulumi.Input<string>;
}
