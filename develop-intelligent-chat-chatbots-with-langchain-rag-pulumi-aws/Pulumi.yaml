# Copyright 2016-2024, Pulumi Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: aws-yaml-langchain
runtime: yaml
description: A minimal Flowise / Langchain AWS YAML Pulumi program

resources:

  langchain-log-group:
    properties:
      retentionInDays: 7
    type: aws:cloudwatch:LogGroup

  langchain-vpc:
    type: awsx:ec2:Vpc
    properties:
      numberOfAvailabilityZones: 2
      enableDnsSupport: true
      enableDnsHostnames: true

  langchain-sg:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${langchain-vpc.vpcId}
      ingress:
      - protocol: tcp
        fromPort: 5432
        toPort: 5432
        cidrBlocks: ["0.0.0.0/0"]
      egress:
      - protocol: "-1"
        fromPort: 0
        toPort: 0
        cidrBlocks: ["0.0.0.0/0"]

  langchain-subnet-group:
    type: aws:rds:SubnetGroup
    properties:
      subnetIds: ${langchain-vpc.publicSubnetIds}

  langchain-db-instance:
    type: aws:rds:Instance
    properties:
      engine: postgres
      engineVersion: "15.4"
      instanceClass: db.t3.micro
      allocatedStorage: 20
      dbName: flowise
      username: myuser
      password:
        fn::secret: ${db-password}
      skipFinalSnapshot: true
      publiclyAccessible: true
      dbSubnetGroupName: ${langchain-subnet-group.name}
      multiAz: false
      vpcSecurityGroupIds:
      - ${langchain-sg.id}

  langchain-key:
    properties:
      description: "Key for encrypting secrets"
      enableKeyRotation: true
      policy:
        fn::toJSON:
          Statement:
          - Action:
            - kms:Create*
            - kms:Describe*
            - kms:Enable*
            - kms:List*
            - kms:Put*
            - kms:Update*
            - kms:Revoke*
            - kms:Disable*
            - kms:Get*
            - kms:Delete*
            - kms:ScheduleKeyDeletion
            - kms:CancelKeyDeletion
            - kms:Tag*
            - kms:UntagResource
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::${accountId}:root
            Resource: "*"
          - Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::${accountId}:root
            Resource: "*"
          Version: '2012-10-17'
      tags:
        pulumi-application: ${pulumi-project}
        pulumi-environment: ${pulumi-stack}
    type: aws:kms:Key

  langchain-db-password-parameter:
    properties:
      keyId: ${langchain-key.keyId}
      name: /pulumi/${pulumi-project}/${pulumi-stack}/DATABASE_PASSWORD
      tags:
        pulumi-application: ${pulumi-project}
        pulumi-environment: ${pulumi-stack}
      type: SecureString
      value: ${db-password}
    type: aws:ssm:Parameter

  langchain-flowise-parameter:
    properties:
      keyId: ${langchain-key.keyId}
      name: /pulumi/${pulumi-project}/${pulumi-stack}/FLOWISE_PASSWORD
      tags:
        pulumi-application: ${pulumi-project}
        pulumi-environment: ${pulumi-stack}
      type: SecureString
      value: ${flowise-password}
    type: aws:ssm:Parameter

  langchain-chroma-token-parameter:
    properties:
      keyId: ${langchain-key.keyId}
      name: /pulumi/${pulumi-project}/${pulumi-stack}/CHROMA_SERVER_AUTH_CREDENTIALS
      tags:
        pulumi-application: ${pulumi-project}
        pulumi-environment: ${pulumi-stack}
      type: SecureString
      value: "test-token"
    type: aws:ssm:Parameter

  langchain-cluster-capacity-providers:
    properties:
      capacityProviders:
      - FARGATE
      - FARGATE_SPOT
      clusterName: ${langchain-ecs-cluster.name}
    type: aws:ecs:ClusterCapacityProviders

  langchain-ecs-cluster:
    properties:
      configuration:
        executeCommandConfiguration:
          logging: DEFAULT
      settings:
      - name: containerInsights
        value: disabled
      tags:
        Name: ${pulumi-project}-${pulumi-stack}
    type: aws:ecs:Cluster

  langchain-ecs-security-group:
    properties:
      egress:
      - cidrBlocks:
        - 0.0.0.0/0
        fromPort: 0
        protocol: -1
        toPort: 0
      ingress:
      - cidrBlocks:
        - 0.0.0.0/0
        fromPort: 0
        protocol: -1
        toPort: 0
      vpcId: ${langchain-vpc.vpcId}
    type: aws:ec2:SecurityGroup

  langchain-execution-role:
    properties:
      assumeRolePolicy:
        fn::toJSON:
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
          Version: '2012-10-17'
      inlinePolicies:
      - name: ${pulumi-project}-${pulumi-stack}-service-secrets-policy
        policy:
          fn::toJSON:
            Statement:
            - Action:
              - rds:*
              Effect: Allow
              Resource:
              - "*"
            - Action:
              - ssm:GetParameters
              Condition:
                StringEquals:
                  ssm:ResourceTag/pulumi-application: ${pulumi-project}
                  ssm:ResourceTag/pulumi-environment: ${pulumi-stack}
              Effect: Allow
              Resource:
              - ${langchain-db-password-parameter.arn}
              - ${langchain-flowise-parameter.arn}
              - ${langchain-chroma-token-parameter.arn}
            - Action:
              - kms:Decrypt
              Condition:
                StringEquals:
                  aws:ResourceTag/pulumi-application: ${pulumi-project}
                  aws:ResourceTag/pulumi-environment: ${pulumi-stack}
              Effect: Allow
              Resource:
              - ${langchain-key.arn}
              Sid: DecryptTaggedKMSKey
            Version: '2012-10-17'
      managedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    type: aws:iam:Role

  langchain-target-group:
    properties:
      port: 80
      protocol: HTTP
      targetType: ip
      vpcId: ${langchain-vpc.vpcId}
    type: aws:lb:TargetGroup

  langchain-listener:
    properties:
      defaultActions:
      - targetGroupArn: ${langchain-target-group.arn}
        type: forward
      loadBalancerArn: ${langchain-load-balancer.arn}
      port: 80
      protocol: HTTP
    type: aws:lb:Listener

  langchain-security-group:
    properties:
      egress:
      - cidrBlocks:
        - 0.0.0.0/0
        fromPort: 0
        protocol: -1
        toPort: 0
      ingress:
      - cidrBlocks:
        - 0.0.0.0/0
        fromPort: 80
        protocol: tcp
        toPort: 80
      vpcId: ${langchain-vpc.vpcId}
    type: aws:ec2:SecurityGroup

  langchain-load-balancer:
    properties:
      loadBalancerType: application
      securityGroups:
      - ${langchain-security-group.id}
      subnets: ${langchain-vpc.publicSubnetIds}
    type: aws:lb:LoadBalancer

  langchain-service:
    properties:
      cluster: ${langchain-ecs-cluster.arn}
      desiredCount: 1
      launchType: FARGATE
      loadBalancers:
      - containerName: ${pulumi-project}-${pulumi-stack}-service
        containerPort: 3000
        targetGroupArn: ${langchain-target-group.arn}
      networkConfiguration:
        assignPublicIp: true
        securityGroups:
        - ${langchain-ecs-security-group.id}
        subnets: ${langchain-vpc.publicSubnetIds}
      schedulingStrategy: REPLICA
      serviceConnectConfiguration:
        enabled: true
        namespace: ${langchain-service-discovery-namespace.arn}
      tags:
        Name: ${pulumi-project}-${pulumi-stack}
      taskDefinition: ${langchain-task-definition.arn}
    type: aws:ecs:Service

  langchain-service-discovery-namespace:
    properties:
      name: ${pulumi-stack}.${pulumi-project}.local
      vpc: ${langchain-vpc.vpcId}
    type: aws:servicediscovery:PrivateDnsNamespace

  langchain-task-definition:
    properties:
      containerDefinitions:
        fn::toJSON:
        - essential: true
          image: chromadb/chroma:latest
          logConfiguration:
            logDriver: awslogs
            options:
              awslogs-group: ${langchain-log-group.name}
              awslogs-region: ${aws:region}
              awslogs-stream-prefix: chroma
          name: ${pulumi-project}-${pulumi-stack}-chroma
          portMappings:
          - containerPort: 8000
            hostPort: 8000
            name: chroma
            protocol: tcp
          environment:
          - name: CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER
            value: "AUTHORIZATION"
          - name: CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER
            value: "chromadb.auth.token.TokenConfigServerAuthCredentialsProvider"
          - name: CHROMA_SERVER_AUTH_PROVIDER
            value: "chromadb.auth.token.TokenAuthServerProvider"
          secrets:
          - name: CHROMA_SERVER_AUTH_CREDENTIALS
            valueFrom: ${langchain-chroma-token-parameter.arn}
        - command:
          - "/bin/sh"
          - "-c"
          - "flowise start"
          essential: true
          image: flowiseai/flowise:1.6.4
          logConfiguration:
            logDriver: awslogs
            options:
              awslogs-group: ${langchain-log-group.name}
              awslogs-region: ${aws:region}
              awslogs-stream-prefix: flowise
          name: ${pulumi-project}-${pulumi-stack}-service
          portMappings:
          - containerPort: 3000
            hostPort: 3000
            name: flowise
            protocol: tcp
          environment:
          - name: DATABASE_TYPE
            value: postgres
          - name: DATABASE_NAME
            value: ${langchain-db-instance.dbName}
          - name: DATABASE_USER
            value: ${langchain-db-instance.username}
          - name: DATABASE_PORT
            value:
              fn::toJSON: ${langchain-db-instance.port}
          - name: DATABASE_HOST
            value: ${langchain-db-instance.address}
          - name: FLOWISE_USERNAME
            value: "admin"
          - name: DATABASE_SSL
            value: "true"
          - name: NODE_TLS_REJECT_UNAUTHORIZED
            value: "0"
          secrets:
          - name: DATABASE_PASSWORD
            valueFrom: ${langchain-db-password-parameter.arn}
          - name: FLOWISE_PASSWORD
            valueFrom: ${langchain-flowise-parameter.arn}
      cpu: 1024
      executionRoleArn: ${langchain-execution-role.arn}
      family: ${pulumi-project}-${pulumi-stack}
      memory: 8192
      networkMode: awsvpc
      requiresCompatibilities:
      - FARGATE
      taskRoleArn: ${langchain-task-role.arn}
    type: aws:ecs:TaskDefinition

  langchain-task-role:
    properties:
      assumeRolePolicy:
        fn::toJSON:
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
          Version: '2012-10-17'
      inlinePolicies:
      - name: ExecuteCommand
        policy:
          fn::toJSON:
            Statement:
            - Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenDataChannel
              Effect: Allow
              Resource: "*"
            - Action:
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
              Effect: Allow
              Resource: "*"
            Version: '2012-10-17'
      - name: DenyIAM
        policy:
          fn::toJSON:
            Statement:
            - Action: iam:*
              Effect: Deny
              Resource: "*"
            Version: '2012-10-17'
    type: aws:iam:Role

variables:
  accountId: ${current.accountId}
  current:
    fn::invoke:
      arguments: {}
      function: aws:getCallerIdentity
  pulumi-project: ${pulumi.project}
  pulumi-stack: ${pulumi.stack}

outputs:
  url: http://${langchain-load-balancer.dnsName}
